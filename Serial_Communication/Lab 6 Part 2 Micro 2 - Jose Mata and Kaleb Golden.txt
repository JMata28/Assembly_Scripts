;*****************************************************************
;* This stationery serves as the framework for a                 *
;* user application (single file, absolute assembly application) *
;* For a more comprehensive program that                         *
;* demonstrates the more advanced functionality of this          *
;* processor, please see the demonstration applications          *
;* located in the examples subdirectory of the                   *
;* Freescale CodeWarrior for the HC12 Program directory          *
;*****************************************************************

; export symbols
            XDEF Entry, _Startup            ; export 'Entry' symbol
            ABSENTRY Entry        ; for absolute assembly: mark this as application entry point



; Include derivative-specific definitions 
		INCLUDE 'derivative.inc' 

ROMStart    EQU  $4000  ; absolute address to place my code/constant data

; variable/data section

            ORG RAMStart
 ; Insert here your data definition.


; code section
            ORG   ROMStart
TDRE EQU %10000000      ;Make a mask for bit TDRE

Entry:
_Startup:
            LDS   #RAMEnd+1       ; initialize the stack pointer

            CLI                     ; enable interrupts
            
            LDAA #%00000010
            STAA DDRS
            
            LDAA #%00001100        ;Enable TE and RE (Transmitter and Receiver)
            STAA SCICR2
            
            LDAA #$00              ;Set M bit to be zero (one start, eight data, and one stop bit)
            STAA SCICR1
            
            STAA SCIBDH             ;Set baud rate to be 9600 (Store 52 in the registers)
            NOP
            LDAA #%00110100
            NOP
            STAA SCIBDL
            NOP 
            
 
 Read_PortS:
             LDAB SCIDRL              ;Store the data in accumulator B
             BEQ Read_PortS

                       
 Write_Ready: 
            brclr SCISR1,TDRE, Write_Ready  ;Wait until the transmit data register is empty and then output a character
            STAB SCIDRL                       ;Output the value in accumulator B 
            brclr SCISR1,TDRE, InfLoop
            BRA Read_PortS
            
 InfLoop:
           BRA InfLoop
            
            
 




;**************************************************************
;*                 Interrupt Vectors                          *
;**************************************************************
            ORG   $FFFE
            DC.W  Entry           ; Reset Vector